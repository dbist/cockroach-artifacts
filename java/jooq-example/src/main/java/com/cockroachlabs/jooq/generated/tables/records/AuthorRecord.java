/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Author;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * jooq encryption example.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record5<Long, String, String, byte[], byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.author.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.author.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.author.first_name</code>.
     */
    public void setFirstName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.author.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.author.last_name</code>.
     */
    public void setLastName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.author.last_name</code>.
     */
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.author.first_name_encrypted</code>.
     */
    public void setFirstNameEncrypted(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.author.first_name_encrypted</code>.
     */
    public byte[] getFirstNameEncrypted() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>public.author.last_name_encrypted</code>.
     */
    public void setLastNameEncrypted(byte[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.author.last_name_encrypted</code>.
     */
    public byte[] getLastNameEncrypted() {
        return (byte[]) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, byte[], byte[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, String, String, byte[], byte[]> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Author.AUTHOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Author.AUTHOR.FIRST_NAME;
    }

    @Override
    public Field<String> field3() {
        return Author.AUTHOR.LAST_NAME;
    }

    @Override
    public Field<byte[]> field4() {
        return Author.AUTHOR.FIRST_NAME_ENCRYPTED;
    }

    @Override
    public Field<byte[]> field5() {
        return Author.AUTHOR.LAST_NAME_ENCRYPTED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFirstName();
    }

    @Override
    public String component3() {
        return getLastName();
    }

    @Override
    public byte[] component4() {
        return getFirstNameEncrypted();
    }

    @Override
    public byte[] component5() {
        return getLastNameEncrypted();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFirstName();
    }

    @Override
    public String value3() {
        return getLastName();
    }

    @Override
    public byte[] value4() {
        return getFirstNameEncrypted();
    }

    @Override
    public byte[] value5() {
        return getLastNameEncrypted();
    }

    @Override
    public AuthorRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AuthorRecord value2(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public AuthorRecord value3(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public AuthorRecord value4(byte[] value) {
        setFirstNameEncrypted(value);
        return this;
    }

    @Override
    public AuthorRecord value5(byte[] value) {
        setLastNameEncrypted(value);
        return this;
    }

    @Override
    public AuthorRecord values(Long value1, String value2, String value3, byte[] value4, byte[] value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Long id, String firstName, String lastName, byte[] firstNameEncrypted, byte[] lastNameEncrypted) {
        super(Author.AUTHOR);

        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        setFirstNameEncrypted(firstNameEncrypted);
        setLastNameEncrypted(lastNameEncrypted);
    }
}
